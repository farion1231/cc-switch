{
  "examples": {
    "openai_compatible": {
      "description": "适用于 OpenAI 兼容的 API（如 OneAPI、NewAPI、第三方 OpenAI 代理）",
      "settingsConfig": {
        "env": {
          "OPENAI_API_KEY": "sk-your-api-key-here",
          "OPENAI_BASE_URL": "https://api.openai.com"
        },
        "testConfig": {
          "endpoints": ["/v1/models", "/v1/chat/completions"],
          "authType": "bearer",
          "httpMethod": "GET",
          "apiKeyPath": "env.OPENAI_API_KEY",
          "baseUrlPath": "env.OPENAI_BASE_URL"
        }
      }
    },
    
    "claude_88code": {
      "description": "88code 等特殊 Claude 代理",
      "settingsConfig": {
        "env": {
          "ANTHROPIC_AUTH_TOKEN": "your-88code-api-key",
          "ANTHROPIC_BASE_URL": "https://api.88code.com"
        },
        "testConfig": {
          "endpoints": ["/v1/messages", "/v1/models"],
          "authType": "auto",
          "httpMethod": "HEAD",
          "apiKeyPath": "env.ANTHROPIC_AUTH_TOKEN",
          "baseUrlPath": "env.ANTHROPIC_BASE_URL",
          "customHeaders": {
            "user-agent": "Claude-Code/1.0",
            "x-client-name": "claude-code"
          }
        }
      }
    },
    
    "custom_api_key_header": {
      "description": "使用自定义 API Key Header 的第三方 API",
      "settingsConfig": {
        "auth": {
          "MY_API_KEY": "your-custom-api-key"
        },
        "config": {
          "base_url": "https://api.custom-provider.com"
        },
        "testConfig": {
          "endpoints": ["/api/v1/test", "/health"],
          "authType": "custom",
          "authHeader": "X-Custom-Api-Key",
          "httpMethod": "GET",
          "apiKeyPath": "auth.MY_API_KEY",
          "baseUrlPath": "config.base_url"
        }
      }
    },
    
    "bearer_with_custom_prefix": {
      "description": "使用自定义前缀的 Bearer Token 认证",
      "settingsConfig": {
        "credentials": {
          "token": "your-token-here",
          "endpoint": "https://api.example.com"
        },
        "testConfig": {
          "endpoints": ["/v1/status"],
          "authType": "bearer",
          "authPrefix": "Token ",
          "httpMethod": "HEAD",
          "apiKeyPath": "credentials.token",
          "baseUrlPath": "credentials.endpoint"
        }
      }
    },
    
    "azure_openai": {
      "description": "Azure OpenAI API",
      "settingsConfig": {
        "azure": {
          "api_key": "your-azure-api-key",
          "endpoint": "https://your-resource.openai.azure.com"
        },
        "testConfig": {
          "endpoints": ["/openai/deployments?api-version=2023-05-15"],
          "authType": "custom",
          "authHeader": "api-key",
          "httpMethod": "GET",
          "apiKeyPath": "azure.api_key",
          "baseUrlPath": "azure.endpoint"
        }
      }
    },
    
    "auto_detect_multiple_endpoints": {
      "description": "自动检测认证方式，测试多个常见端点",
      "settingsConfig": {
        "api": {
          "key": "your-api-key",
          "url": "https://api.provider.com"
        },
        "testConfig": {
          "endpoints": [
            "/v1/models",
            "/v1/chat/completions",
            "/api/health",
            "/status"
          ],
          "authType": "auto",
          "httpMethod": "HEAD",
          "apiKeyPath": "api.key",
          "baseUrlPath": "api.url"
        }
      }
    },
    
    "minimal_config": {
      "description": "最小配置 - 只指定必需字段，其他使用默认值",
      "settingsConfig": {
        "env": {
          "API_TOKEN": "your-token",
          "BASE_URL": "https://api.example.com"
        },
        "testConfig": {
          "apiKeyPath": "env.API_TOKEN",
          "baseUrlPath": "env.BASE_URL"
        }
      },
      "note": "未指定的字段将使用默认值: authType='auto', httpMethod='HEAD', endpoints=常见端点列表"
    },
    
    "complex_custom_headers": {
      "description": "包含多个自定义 Headers 的复杂配置",
      "settingsConfig": {
        "credentials": {
          "api_key": "your-api-key",
          "base_url": "https://api.example.com"
        },
        "testConfig": {
          "endpoints": ["/v1/test"],
          "authType": "bearer",
          "httpMethod": "GET",
          "apiKeyPath": "credentials.api_key",
          "baseUrlPath": "credentials.base_url",
          "customHeaders": {
            "X-Client-Version": "1.0.0",
            "X-Platform": "cc-switch",
            "User-Agent": "CCSwitch/1.0",
            "Accept-Language": "zh-CN,en"
          }
        }
      }
    }
  },
  
  "field_descriptions": {
    "testConfig": {
      "endpoints": "要测试的端点列表（相对路径），留空则使用默认常见端点",
      "authType": "认证类型: 'bearer' | 'api-key' | 'x-api-key' | 'custom' | 'auto'（默认）",
      "authHeader": "认证 Header 名称（authType 为 'custom' 时使用）",
      "authPrefix": "认证值前缀（如 'Bearer '），留空则无前缀",
      "customHeaders": "自定义额外的 HTTP Headers（可选）",
      "httpMethod": "HTTP 方法: 'GET' | 'POST' | 'HEAD'（默认）",
      "apiKeyPath": "API Key 在配置中的路径（如 'env.API_KEY'）",
      "baseUrlPath": "Base URL 在配置中的路径（如 'env.BASE_URL'）"
    }
  },
  
  "usage_notes": [
    "1. 配置路径使用点号分隔，如 'env.ANTHROPIC_AUTH_TOKEN' 表示 settings_config.env.ANTHROPIC_AUTH_TOKEN",
    "2. authType='auto' 时会自动尝试多种常见认证方式（推荐用于未知类型的 API）",
    "3. 如果不配置 testConfig，系统会根据 app_type（Claude/Codex）使用内置的测试逻辑",
    "4. endpoints 支持相对路径（自动拼接 base_url）和绝对路径",
    "5. httpMethod 建议使用 'HEAD' 或 'GET'，避免使用可能修改数据的 'POST'",
    "6. customHeaders 会与认证 headers 合并，可用于添加特殊的客户端标识"
  ]
}
